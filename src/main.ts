import {
  app,
  BrowserWindow,
  dialog,
  ipcMain,
  Menu,
  MenuItemConstructorOptions
} from 'electron';
import { setup } from './ipc/server';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    title: 'AerPID Suite',
    roundedCorners: false,
    minHeight: 600,
    minWidth: 800,
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      sandbox: true,
      nodeIntegration: true
    },
    icon: './src/img/favicon.ico'
  });
  const createMenu = (isConnected: boolean) => {
    const template: MenuItemConstructorOptions[] = [
      {
        label: 'AerTiny',
        submenu: [
          {
            label: 'Home',
            accelerator: 'CmdOrCtrl+Shift+H',
            click: function () {
              mainWindow.webContents.executeJavaScript(
                `window.location.hash = '#/home';`
              );
            }
          },
          {
            label: 'DevTools',
            accelerator: 'CmdOrCtrl+Shift+I',
            click: function () {
              mainWindow.webContents.toggleDevTools();
            }
          },
          {
            label: 'Serial Setup',
            accelerator: 'CmdOrCtrl+Shift+S',
            click: function () {
              mainWindow.webContents.executeJavaScript(
                `window.electronAPI.disconnect();window.location.hash = '#/';`
              );
            }
          },
          {
            type: 'separator'
          },
          {
            label: 'Quit',
            accelerator: 'CmdOrCtrl+Q',
            click: function () {
              app.quit();
            }
          }
        ]
      }
    ];

    if (isConnected) {
      template.push({
        label: 'Settings',
        submenu: [
          {
            label: 'General',
            click: function () {
              mainWindow.webContents.executeJavaScript(
                `window.location.hash = '#/settings';`
              );
            }
          },
          {
            label: 'Heater',
            click: function () {
              mainWindow.webContents.executeJavaScript(
                `window.location.hash = '#/heater';`
              );
            }
          },
          {
            label: 'Lights',
            click: function () {
              mainWindow.webContents.executeJavaScript(
                `window.location.hash = '#/lights';`
              );
            }
          },
          {
            label: 'Comms',
            click: function () {
              mainWindow.webContents.executeJavaScript(
                `window.location.hash = '#/comms';`
              );
            }
          }
        ]
      });
      template.push({
        label: 'Utils',
        submenu: [
          {
            label: 'Serial Terminal',
            accelerator: 'CmdOrCtrl+Shift+T',
            click: function () {
              dialog.showMessageBox({
                type: 'info',
                message: 'Coming Soon!',
                buttons: ['OK'],
                defaultId: 0,
                cancelId: 0
              });
            }
          },
          {
            label: 'Logs',
            accelerator: 'CmdOrCtrl+Shift+L',
            click: function () {
              dialog.showMessageBox({
                type: 'info',
                message: 'Coming Soon!',
                buttons: ['OK'],
                defaultId: 0,
                cancelId: 0
              });
            }
          },
          {
            label: 'Graphs',
            accelerator: 'CmdOrCtrl+Shift+G',
            click: function () {
              dialog.showMessageBox({
                type: 'info',
                message: 'Coming Soon!',
                buttons: ['OK'],
                defaultId: 0,
                cancelId: 0
              });
            }
          }
        ]
      });
    }

    template.push({
      label: 'Contact',
      click: function () {
        mainWindow.webContents.executeJavaScript(
          `window.location.hash = '#/contact';`
        );
      }
    });
    return template as MenuItemConstructorOptions[];
  };

  ipcMain.on('request-update-menu', (event, isConnected) => {
    console.log('Received request-update-menu event with:', isConnected);
    const template: MenuItemConstructorOptions[] = createMenu(isConnected);
    Menu.setApplicationMenu(Menu.buildFromTemplate(template));
  });

  const template: MenuItemConstructorOptions[] = createMenu(false);

  Menu.setApplicationMenu(Menu.buildFromTemplate(template));

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY, {
    extraHeaders:
      "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-eval'; style-src 'self' 'unsafe-inline'"
  });
  setup(mainWindow);

  // Open the DevTools.
  if (process.env.NODE_ENV === 'development')
    mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
